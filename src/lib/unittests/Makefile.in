#
# Bareos Tests Makefile
#
@MCOMMON@

srcdir = @srcdir@
VPATH = @srcdir@
.PATH: @srcdir@

# two up
basedir = ../..
# top dir
topdir = ../../..
# this dir relative to top dir
thisdir = src/lib/unittests

DEBUG = @DEBUG@
ZLIB_INC = @ZLIB_INC@
LZO_INC = @LZO_INC@

first_rule: all
dummy:

GETTEXT_LIBS = @LIBINTL@

TESTS = test_lib

INCLUDES += -I$(srcdir) -I$(basedir) -I$(basedir)/include

.SUFFIXES:	.c .o
.PHONY:
.DONTCARE:

TEST_SRCS = alist_test.c passphrase_test.c dlist_test.c htable_test.c rblist_test.c edit_test.c bsnprintf_test.c sellist_test.c scan_test.c base64_test.c devlock_test.c rwlock_test.c
TEST_OBJS = $(TEST_SRCS:.c=.o)

TEST = test_lib
LDFLAGS += @CMOCKA_LIBS@

CXXFLAGS += -Wno-write-strings

# inference rules
.c.o:
	@echo "Compiling $<"
	$(CXX) $(DEFS) $(DEBUG) -c $(CPPFLAGS) $(INCLUDES) $(DINCLUDE) $(CXXFLAGS) $<

#-------------------------------------------------------------------------
all: Makefile $(TEST) $(TEST_OBJS)
	@echo "==== Make of tests is good ===="
	@echo " "
#	for test in $(TESTS); do ./$${test}; done

check: $(TEST)
	./$(TEST)

Makefile: $(srcdir)/Makefile.in $(topdir)/config.status
	cd $(topdir) \
	  && CONFIG_FILES=$(thisdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

test_lib: Makefile test_lib.o $(basedir)/lib/libbareos$(DEFAULT_ARCHIVE_TYPE) $(TEST_OBJS)

	@echo "Linking $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(LDFLAGS) -L. -L$(basedir)/lib -o $@ test_lib.o $(TEST_OBJS)\
      $(DLIB) -lbareos -lm $(LIBS) $(GETTEXT_LIBS) $(OPENSSL_LIBS_NONSHARED) $(GNUTLS_LIBS_NONSHARED)

libtool-clean:
	@$(RMF) -r .libs _libs

clean:	libtool-clean
	@$(RMF) bsmtp core core.* a.out *.o *.bak *~ *.intpro *.extpro 1 2 3
	@$(RMF) $(TESTS)

realclean: clean
	@$(RMF) tags

distclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

devclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)

installall: $(TESTS)
	@for tst in ${TESTS} ; do \
	   $(LIBTOOL_INSTALL) $(INSTALL_PROGRAM) $$tst $(DESTDIR)$(sbindir)/$$tst ; \
	done

install:

# Semi-automatic generation of dependencies:
# Use gcc -MM because X11 `makedepend' doesn't work on all systems
# and it also includes system headers.
# `semi'-automatic since dependencies are generated at distribution time.

depend:
	@$(MV) Makefile Makefile.bak
	@$(SED) "/^# DO NOT DELETE:/,$$ d" Makefile.bak > Makefile
	@$(ECHOCMD) "# DO NOT DELETE: nice dependency list follows" >> Makefile
	@$(CXX) -S -M $(CPPFLAGS) $(INCLUDES) *.c >> Makefile
	@if test -f Makefile ; then \
	    $(RMF) Makefile.bak; \
	else \
	   $(MV) Makefile.bak Makefile; \
	   echo " ===== Something went wrong in make depend ====="; \
	fi

# -----------------------------------------------------------------------
# DO NOT DELETE: nice dependency list follows
